/*******************************************************
 *   Executable example for the maze6 instance using   * 
 *    the rule approach instead of a list of facts     *
 *******************************************************/

initial_state(  maze, p(33,20)  ).
final_state(  maze, p(40,1)  ).
c(X, Y, wall) :-
	X = 0, Y = 0
	;
	X = 0, Y = 1
	;
	X = 0, Y = 2
	;
	X = 0, Y = 3
	;
	X = 0, Y = 4
	;
	X = 0, Y = 5
	;
	X = 0, Y = 6
	;
	X = 0, Y = 7
	;
	X = 0, Y = 8
	;
	X = 0, Y = 9
	;
	X = 0, Y = 10
	;
	X = 0, Y = 11
	;
	X = 0, Y = 12
	;
	X = 0, Y = 13
	;
	X = 0, Y = 14
	;
	X = 0, Y = 15
	;
	X = 0, Y = 16
	;
	X = 0, Y = 17
	;
	X = 0, Y = 18
	;
	X = 0, Y = 19
	;
	X = 0, Y = 20
	;
	X = 1, Y = 0
	;
	X = 1, Y = 6
	;
	X = 1, Y = 12
	;
	X = 1, Y = 16
	;
	X = 1, Y = 20
	;
	X = 2, Y = 0
	;
	X = 2, Y = 2
	;
	X = 2, Y = 3
	;
	X = 2, Y = 4
	;
	X = 2, Y = 6
	;
	X = 2, Y = 8
	;
	X = 2, Y = 9
	;
	X = 2, Y = 10
	;
	X = 2, Y = 12
	;
	X = 2, Y = 14
	;
	X = 2, Y = 16
	;
	X = 2, Y = 17
	;
	X = 2, Y = 18
	;
	X = 2, Y = 20
	;
	X = 3, Y = 0
	;
	X = 3, Y = 4
	;
	X = 3, Y = 6
	;
	X = 3, Y = 10
	;
	X = 3, Y = 12
	;
	X = 3, Y = 14
	;
	X = 3, Y = 20
	;
	X = 4, Y = 0
	;
	X = 4, Y = 1
	;
	X = 4, Y = 2
	;
	X = 4, Y = 4
	;
	X = 4, Y = 6
	;
	X = 4, Y = 7
	;
	X = 4, Y = 8
	;
	X = 4, Y = 10
	;
	X = 4, Y = 12
	;
	X = 4, Y = 14
	;
	X = 4, Y = 15
	;
	X = 4, Y = 16
	;
	X = 4, Y = 17
	;
	X = 4, Y = 18
	;
	X = 4, Y = 20
	;
	X = 5, Y = 0
	;
	X = 5, Y = 4
	;
	X = 5, Y = 6
	;
	X = 5, Y = 10
	;
	X = 5, Y = 12
	;
	X = 5, Y = 18
	;
	X = 5, Y = 20
	;
	X = 6, Y = 0
	;
	X = 6, Y = 2
	;
	X = 6, Y = 3
	;
	X = 6, Y = 4
	;
	X = 6, Y = 6
	;
	X = 6, Y = 8
	;
	X = 6, Y = 9
	;
	X = 6, Y = 10
	;
	X = 6, Y = 12
	;
	X = 6, Y = 13
	;
	X = 6, Y = 14
	;
	X = 6, Y = 15
	;
	X = 6, Y = 16
	;
	X = 6, Y = 18
	;
	X = 6, Y = 20
	;
	X = 7, Y = 0
	;
	X = 7, Y = 2
	;
	X = 7, Y = 4
	;
	X = 7, Y = 6
	;
	X = 7, Y = 8
	;
	X = 7, Y = 12
	;
	X = 7, Y = 18
	;
	X = 7, Y = 20
	;
	X = 8, Y = 0
	;
	X = 8, Y = 2
	;
	X = 8, Y = 4
	;
	X = 8, Y = 6
	;
	X = 8, Y = 8
	;
	X = 8, Y = 10
	;
	X = 8, Y = 11
	;
	X = 8, Y = 12
	;
	X = 8, Y = 14
	;
	X = 8, Y = 15
	;
	X = 8, Y = 16
	;
	X = 8, Y = 17
	;
	X = 8, Y = 18
	;
	X = 8, Y = 20
	;
	X = 9, Y = 0
	;
	X = 9, Y = 2
	;
	X = 9, Y = 4
	;
	X = 9, Y = 8
	;
	X = 9, Y = 10
	;
	X = 9, Y = 14
	;
	X = 9, Y = 18
	;
	X = 9, Y = 20
	;
	X = 10, Y = 0
	;
	X = 10, Y = 2
	;
	X = 10, Y = 4
	;
	X = 10, Y = 5
	;
	X = 10, Y = 6
	;
	X = 10, Y = 7
	;
	X = 10, Y = 8
	;
	X = 10, Y = 10
	;
	X = 10, Y = 12
	;
	X = 10, Y = 14
	;
	X = 10, Y = 15
	;
	X = 10, Y = 16
	;
	X = 10, Y = 18
	;
	X = 10, Y = 20
	;
	X = 11, Y = 0
	;
	X = 11, Y = 2
	;
	X = 11, Y = 8
	;
	X = 11, Y = 10
	;
	X = 11, Y = 12
	;
	X = 11, Y = 14
	;
	X = 11, Y = 18
	;
	X = 11, Y = 20
	;
	X = 12, Y = 0
	;
	X = 12, Y = 2
	;
	X = 12, Y = 4
	;
	X = 12, Y = 5
	;
	X = 12, Y = 6
	;
	X = 12, Y = 7
	;
	X = 12, Y = 8
	;
	X = 12, Y = 10
	;
	X = 12, Y = 12
	;
	X = 12, Y = 14
	;
	X = 12, Y = 16
	;
	X = 12, Y = 17
	;
	X = 12, Y = 18
	;
	X = 12, Y = 20
	;
	X = 13, Y = 0
	;
	X = 13, Y = 2
	;
	X = 13, Y = 8
	;
	X = 13, Y = 10
	;
	X = 13, Y = 12
	;
	X = 13, Y = 14
	;
	X = 13, Y = 16
	;
	X = 13, Y = 20
	;
	X = 14, Y = 0
	;
	X = 14, Y = 2
	;
	X = 14, Y = 3
	;
	X = 14, Y = 4
	;
	X = 14, Y = 5
	;
	X = 14, Y = 6
	;
	X = 14, Y = 8
	;
	X = 14, Y = 10
	;
	X = 14, Y = 11
	;
	X = 14, Y = 12
	;
	X = 14, Y = 14
	;
	X = 14, Y = 16
	;
	X = 14, Y = 18
	;
	X = 14, Y = 19
	;
	X = 14, Y = 20
	;
	X = 15, Y = 0
	;
	X = 15, Y = 2
	;
	X = 15, Y = 8
	;
	X = 15, Y = 10
	;
	X = 15, Y = 14
	;
	X = 15, Y = 16
	;
	X = 15, Y = 18
	;
	X = 15, Y = 20
	;
	X = 16, Y = 0
	;
	X = 16, Y = 2
	;
	X = 16, Y = 4
	;
	X = 16, Y = 5
	;
	X = 16, Y = 6
	;
	X = 16, Y = 7
	;
	X = 16, Y = 8
	;
	X = 16, Y = 10
	;
	X = 16, Y = 12
	;
	X = 16, Y = 13
	;
	X = 16, Y = 14
	;
	X = 16, Y = 16
	;
	X = 16, Y = 18
	;
	X = 16, Y = 20
	;
	X = 17, Y = 0
	;
	X = 17, Y = 2
	;
	X = 17, Y = 6
	;
	X = 17, Y = 10
	;
	X = 17, Y = 12
	;
	X = 17, Y = 16
	;
	X = 17, Y = 18
	;
	X = 17, Y = 20
	;
	X = 18, Y = 0
	;
	X = 18, Y = 2
	;
	X = 18, Y = 3
	;
	X = 18, Y = 4
	;
	X = 18, Y = 6
	;
	X = 18, Y = 8
	;
	X = 18, Y = 9
	;
	X = 18, Y = 10
	;
	X = 18, Y = 12
	;
	X = 18, Y = 14
	;
	X = 18, Y = 16
	;
	X = 18, Y = 18
	;
	X = 18, Y = 20
	;
	X = 19, Y = 0
	;
	X = 19, Y = 4
	;
	X = 19, Y = 6
	;
	X = 19, Y = 8
	;
	X = 19, Y = 12
	;
	X = 19, Y = 14
	;
	X = 19, Y = 16
	;
	X = 19, Y = 18
	;
	X = 19, Y = 20
	;
	X = 20, Y = 0
	;
	X = 20, Y = 2
	;
	X = 20, Y = 4
	;
	X = 20, Y = 6
	;
	X = 20, Y = 8
	;
	X = 20, Y = 10
	;
	X = 20, Y = 12
	;
	X = 20, Y = 14
	;
	X = 20, Y = 15
	;
	X = 20, Y = 16
	;
	X = 20, Y = 18
	;
	X = 20, Y = 20
	;
	X = 21, Y = 0
	;
	X = 21, Y = 2
	;
	X = 21, Y = 4
	;
	X = 21, Y = 6
	;
	X = 21, Y = 8
	;
	X = 21, Y = 10
	;
	X = 21, Y = 12
	;
	X = 21, Y = 16
	;
	X = 21, Y = 20
	;
	X = 22, Y = 0
	;
	X = 22, Y = 1
	;
	X = 22, Y = 2
	;
	X = 22, Y = 4
	;
	X = 22, Y = 6
	;
	X = 22, Y = 8
	;
	X = 22, Y = 9
	;
	X = 22, Y = 10
	;
	X = 22, Y = 12
	;
	X = 22, Y = 13
	;
	X = 22, Y = 14
	;
	X = 22, Y = 16
	;
	X = 22, Y = 17
	;
	X = 22, Y = 18
	;
	X = 22, Y = 20
	;
	X = 23, Y = 0
	;
	X = 23, Y = 4
	;
	X = 23, Y = 6
	;
	X = 23, Y = 8
	;
	X = 23, Y = 12
	;
	X = 23, Y = 18
	;
	X = 23, Y = 20
	;
	X = 24, Y = 0
	;
	X = 24, Y = 2
	;
	X = 24, Y = 3
	;
	X = 24, Y = 4
	;
	X = 24, Y = 6
	;
	X = 24, Y = 8
	;
	X = 24, Y = 10
	;
	X = 24, Y = 11
	;
	X = 24, Y = 12
	;
	X = 24, Y = 14
	;
	X = 24, Y = 15
	;
	X = 24, Y = 16
	;
	X = 24, Y = 18
	;
	X = 24, Y = 20
	;
	X = 25, Y = 0
	;
	X = 25, Y = 2
	;
	X = 25, Y = 8
	;
	X = 25, Y = 10
	;
	X = 25, Y = 14
	;
	X = 25, Y = 16
	;
	X = 25, Y = 18
	;
	X = 25, Y = 20
	;
	X = 26, Y = 0
	;
	X = 26, Y = 2
	;
	X = 26, Y = 4
	;
	X = 26, Y = 5
	;
	X = 26, Y = 6
	;
	X = 26, Y = 7
	;
	X = 26, Y = 8
	;
	X = 26, Y = 10
	;
	X = 26, Y = 12
	;
	X = 26, Y = 13
	;
	X = 26, Y = 14
	;
	X = 26, Y = 16
	;
	X = 26, Y = 18
	;
	X = 26, Y = 20
	;
	X = 27, Y = 0
	;
	X = 27, Y = 2
	;
	X = 27, Y = 4
	;
	X = 27, Y = 8
	;
	X = 27, Y = 10
	;
	X = 27, Y = 14
	;
	X = 27, Y = 16
	;
	X = 27, Y = 18
	;
	X = 27, Y = 20
	;
	X = 28, Y = 0
	;
	X = 28, Y = 2
	;
	X = 28, Y = 4
	;
	X = 28, Y = 6
	;
	X = 28, Y = 8
	;
	X = 28, Y = 10
	;
	X = 28, Y = 11
	;
	X = 28, Y = 12
	;
	X = 28, Y = 14
	;
	X = 28, Y = 16
	;
	X = 28, Y = 18
	;
	X = 28, Y = 20
	;
	X = 29, Y = 0
	;
	X = 29, Y = 2
	;
	X = 29, Y = 4
	;
	X = 29, Y = 6
	;
	X = 29, Y = 8
	;
	X = 29, Y = 12
	;
	X = 29, Y = 14
	;
	X = 29, Y = 18
	;
	X = 29, Y = 20
	;
	X = 30, Y = 0
	;
	X = 30, Y = 2
	;
	X = 30, Y = 4
	;
	X = 30, Y = 6
	;
	X = 30, Y = 8
	;
	X = 30, Y = 9
	;
	X = 30, Y = 10
	;
	X = 30, Y = 12
	;
	X = 30, Y = 14
	;
	X = 30, Y = 15
	;
	X = 30, Y = 16
	;
	X = 30, Y = 17
	;
	X = 30, Y = 18
	;
	X = 30, Y = 20
	;
	X = 31, Y = 0
	;
	X = 31, Y = 2
	;
	X = 31, Y = 4
	;
	X = 31, Y = 6
	;
	X = 31, Y = 12
	;
	X = 31, Y = 20
	;
	X = 32, Y = 0
	;
	X = 32, Y = 2
	;
	X = 32, Y = 4
	;
	X = 32, Y = 6
	;
	X = 32, Y = 7
	;
	X = 32, Y = 8
	;
	X = 32, Y = 9
	;
	X = 32, Y = 10
	;
	X = 32, Y = 11
	;
	X = 32, Y = 12
	;
	X = 32, Y = 14
	;
	X = 32, Y = 15
	;
	X = 32, Y = 16
	;
	X = 32, Y = 17
	;
	X = 32, Y = 18
	;
	X = 32, Y = 19
	;
	X = 32, Y = 20
	;
	X = 33, Y = 0
	;
	X = 33, Y = 2
	;
	X = 33, Y = 6
	;
	X = 33, Y = 12
	;
	X = 33, Y = 14
	;
	X = 33, Y = 18
	;
	X = 34, Y = 0
	;
	X = 34, Y = 2
	;
	X = 34, Y = 3
	;
	X = 34, Y = 4
	;
	X = 34, Y = 5
	;
	X = 34, Y = 6
	;
	X = 34, Y = 8
	;
	X = 34, Y = 9
	;
	X = 34, Y = 10
	;
	X = 34, Y = 11
	;
	X = 34, Y = 12
	;
	X = 34, Y = 14
	;
	X = 34, Y = 16
	;
	X = 34, Y = 18
	;
	X = 34, Y = 20
	;
	X = 35, Y = 0
	;
	X = 35, Y = 2
	;
	X = 35, Y = 6
	;
	X = 35, Y = 12
	;
	X = 35, Y = 14
	;
	X = 35, Y = 16
	;
	X = 35, Y = 18
	;
	X = 35, Y = 20
	;
	X = 36, Y = 0
	;
	X = 36, Y = 2
	;
	X = 36, Y = 3
	;
	X = 36, Y = 4
	;
	X = 36, Y = 6
	;
	X = 36, Y = 8
	;
	X = 36, Y = 9
	;
	X = 36, Y = 10
	;
	X = 36, Y = 12
	;
	X = 36, Y = 14
	;
	X = 36, Y = 16
	;
	X = 36, Y = 18
	;
	X = 36, Y = 20
	;
	X = 37, Y = 0
	;
	X = 37, Y = 2
	;
	X = 37, Y = 6
	;
	X = 37, Y = 10
	;
	X = 37, Y = 12
	;
	X = 37, Y = 14
	;
	X = 37, Y = 16
	;
	X = 37, Y = 18
	;
	X = 37, Y = 20
	;
	X = 38, Y = 0
	;
	X = 38, Y = 2
	;
	X = 38, Y = 4
	;
	X = 38, Y = 5
	;
	X = 38, Y = 6
	;
	X = 38, Y = 7
	;
	X = 38, Y = 8
	;
	X = 38, Y = 10
	;
	X = 38, Y = 12
	;
	X = 38, Y = 14
	;
	X = 38, Y = 16
	;
	X = 38, Y = 18
	;
	X = 38, Y = 20
	;
	X = 39, Y = 0
	;
	X = 39, Y = 2
	;
	X = 39, Y = 10
	;
	X = 39, Y = 16
	;
	X = 39, Y = 20
	;
	X = 40, Y = 0
	;
	X = 40, Y = 2
	;
	X = 40, Y = 3
	;
	X = 40, Y = 4
	;
	X = 40, Y = 5
	;
	X = 40, Y = 6
	;
	X = 40, Y = 7
	;
	X = 40, Y = 8
	;
	X = 40, Y = 9
	;
	X = 40, Y = 10
	;
	X = 40, Y = 11
	;
	X = 40, Y = 12
	;
	X = 40, Y = 13
	;
	X = 40, Y = 14
	;
	X = 40, Y = 15
	;
	X = 40, Y = 16
	;
	X = 40, Y = 17
	;
	X = 40, Y = 18
	;
	X = 40, Y = 19
	;
	X = 40, Y = 20
	;
	X > 41; Y > 21.
	
/***************************************************************************/
/* Now we implement our table of moves.                                    */
/***************************************************************************/

move(  p( _, _ ), up    ).
move(  p( _, _ ), down  ).
move(  p( _, _ ), left  ).
move(  p( _, _ ), right ).
	
	

/***************************************************************************/
/* We now implement the state update functionality.                        */
/***************************************************************************/

% UP
update(  p(X, Y), up, p(X_new, Y)  ) :-
	X_new is X - 1.

% DOWN
update(  p(X,Y), down, p(X_new, Y) ) :-
	X_new is X + 1.

% LEFT
update(  p(X,Y), left, p(X, Y_new)  ) :-
	Y_new is Y - 1.

% RIGHT
update(  p(X,Y), right, p(X, Y_new)  ) :-
	Y_new is Y + 1.



/***************************************************************************/
/* Implementation of the predicate that checks whether a state is legal    */
/* according to the constraints imposed by the problem's statement.        */
/***************************************************************************/

legal(  p(X,Y) ) :-
	X >= 0,
    Y >= 0,
    \+ c(X,Y,wall).

/************************************************************************************/
/* A reusable depth-first problem solving framework.                                */
/************************************************************************************/

solve_dfs(Problem, State, _, []) :-
	final_state(Problem, State).
solve_dfs(Problem, State, History, [Move|Moves]) :-
	move(State, Move),
	update(State, Move, NewState),
	legal(NewState),
	\+ member(NewState, History),
    %print(NewState),
	solve_dfs(Problem, NewState, [NewState|History], Moves).

solve_problem(Problem, Solution) :-    
	initial_state(Problem, Initial),
	solve_dfs(Problem, Initial, [Initial], Solution).
	